
NAME
    Keysh - A simple shell

SYNOPSIS
    ./keysh [file]

AUTHOR
    The Ky Lien - 19321566

DESCRIPTION
    Keyline is a sh-compatible command language interpreter that
    executes commands read from the standard input or from a
    file. It also incorporates useful features from the bash
    shell.

    This shell is intended for UNIX machines and doesn't operate
    in a other systems such as Windows.

REFERENCES

    # Pajankar, A., 2021. I/O Redirection and Cron. In Practical
    Linux with Raspberry Pi OS (pp. 111-116). Apress, Berkeley,
    CA.
    # Oualline, S., 1997. Practical C programming. " O'Reilly Me
    dia, Inc.".
    # Gehani, N. and Roome, W.D., 1989. The concurrent C program
    ming language. Silicon Press.
    # Van der Linden, P., 1994. Expert C programming: deep C sec
    rets. Prentice Hall Professional.

ARGUMENTS
    If there is an arguement supplied Keyshell will assume the 
    arguement is a filename and check for the file in the
    directory and then run commands that are in that file.

ENVIRONMENTAL CONCEPTS
    Environment variable
        These are a dynamic-named vale that can affect the way
        running processes will behave on a computer. They are
        part of the environemnt in which a process runs. They 
        are strings that contain information about the system
        you are using. It is possible to customize the variables
        to change how a system works and change the behaviours 
        of the applications on the system.

    Background execution
        Background process is a computer process that runs
        behind the scenes and without user intervention.
        In this shell to run a background process one must
        use '&' at the end of the arguements. The shell should
        execute the commands in the background then.

PROCESS
    A process is a program executing in the background. You can
    have multiple processes executing the same program. Every
    process can have its own copy of the program within its own
    address space and it can execute independently from the
    other copies. The system manages the execution of the
    processes by dividing memory/operations between the
    process(es).

    PARENT/CHILD OPERATIONS
        When a new process is created it is called the child and
        the process in which that child process is created from
        is called the parent. When a parent process creates a
        child process, there are two main functions

        1. The child and parent processes run concurrently.
        2. The parent waits for the child to finish executing.

    Processes help to speed up the execution of our programs, by
    dividing the work between all available processes in the 
    system.

REDIRECTION
    Before a command is executed, its input and output may be
    redirected using a special notation interpreted by the
    shell. Redirection allows commands' file handles to be 
    duplicated. opened, closed, made to refer to different files
    , and can change the files the command reads from and writes
    to.

        ls > listing

    This is an example of output redirection, its main feature
    is to output the contents of the command into a file
    created using the word after the '>' as the filename. You
    are also able to give standard input(s) to a program.

    Likewise its possible to append/add contents of the command
    to a file by doing this:

        ls >> listing

BATCHFILE
    You can instantiate the shell with a batchfile. A batchfile
    is a file with commands written inside it already. It will
    then proccess those commands and it will also exit the shell
    after the commands have been executed.

COMMANDS
    cd [DIRECTORY] - Change the current default directory. If no
        arguement is present then it will print out the current
        working directory. If a arguement is supplied but a
        directory doesn't exist with the name of the arguement
        it will throw an error.
    
    clr - Clears the screen

    dir - List the contents of the directory.

    environ - List all the environment strings.

    echo [arg1 arg2... arg(n)]
         - Displays arguements followed by a newline.

    help - Displays the user manual using the more filter.

    pause - Pause operation of the shell until 'Enter' is
            pressed.
    
    quit - Quit out of the shell.

    touch [FILENAME] - Creates a new file in the current working
            directory.

EXTRA COMMAND
    I wanted to add in touch as it is useful to create a file
    from the shell. This provide the user with a easy way to
    create a blank.

/* 
Name: The Ky Lien
SID: 19321566

Declaration of Plagiarism:
https://drive.google.com/file/d/1hf0x9vBHD8r-X1Ob_1fE1I_xAtjTYkZQ/view

*/